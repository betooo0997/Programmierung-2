<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SFML Test</name>
    </assembly>
    <members>
        <member name="T:Game.Archer">
            <summary>
            Represents an Enemy that has the ability to shoot Projectiles
            </summary>
        </member>
        <member name="F:Game.Archer.cShooting">
            <summary>
            Clock used for Shooting a determined Projectiles per Second
            </summary>
        </member>
        <member name="F:Game.Archer.cMoving">
            <summary>
            Clock used for changing Movement of the Archer a determined number of times per Second
            </summary>
        </member>
        <member name="F:Game.Archer.cSuspecting">
            <summary>
            Clock used for suspecting Player presence only for a determined number of Seconds
            </summary>
        </member>
        <member name="F:Game.Archer.tShooting">
            <summary>
            Timer used for measuring Time of cShooting
            </summary>
        </member>
        <member name="F:Game.Archer.tMoving">
            <summary>
            Timer used for measuring Time of cMoving
            </summary>
        </member>
        <member name="F:Game.Archer.tSuspecting">
            <summary>
            Timer used for measuring Time of cSuspecting
            </summary>
        </member>
        <member name="F:Game.Archer.bSuspecting">
            <summary>
            Bool that indicates wheter the Archer is suspecting the Player's presence or not
            </summary>
        </member>
        <member name="F:Game.Archer.ffont">
            <summary>
            Font used to display GCost, HCost and FCost of each Node created by the Pathfinding Algorithm
            </summary>
        </member>
        <member name="M:Game.Archer.#ctor(SFML.System.Vector2f,System.UInt32,Game.EntityAppearance,System.UInt32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Constructor of the Archer
            </summary>
            <param name="vArcherPosition"   >Startposition of the Archer</param>
            <param name="uID"               >ID of the Archer</param>
            <param name="eNewAppearance"       >Enum that indicates the texture of the Archer</param>
            <param name="uDamage"           >Damage that the Archer inflicts when Player is hit by a Projectile</param>
            <param name="iDistanceDetection">Sight Radius of the Archer</param>
            <param name="bIsBoss"           >If true Archer is Boss Type</param>
            <param name="iHealth"           >Health of the Archer</param>
        </member>
        <member name="M:Game.Archer.Update(SFML.System.Vector2f@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Updates Enemy Logic
            </summary>
        </member>
        <member name="M:Game.Archer.Draw">
            <summary>
            Returns a List of the Elements to be drawed
            </summary>
        </member>
        <member name="M:Game.Archer.DetectLogic">
            <summary>
            Updates Detect Logic of the Archer. 
            If it detects the Player, the Archer shoots Projectiles. 
            If it is hit or has detected the Player previously it moves to the registered Position.
            </summary>
        </member>
        <member name="M:Game.Archer.Move">
            <summary>
            Moves Archer Randomly, but always to a Position within the DetectionRadius and respecting Collision with Tiles. The Archer doesn't psush the Player around.
            </summary>
        </member>
        <member name="M:Game.Archer.PathfinderLogic">
            <summary>
            Updates PathFinder Logic of the Archer.
            Moves the Enemy to the Player once the Pathfinding Algorithm was initiated.
            The Archer follows the created nodes, but still respects Collisions with Tiles.
            </summary>
        </member>
        <member name="M:Game.Archer.Shoot">
            <summary>
            Shoots a Projectile to the Player's Position
            </summary>
        </member>
        <member name="M:Game.Archer.UpdatingProjectiles">
            <summary>
            Updates and Disposes Projectiles if necessary
            </summary>
        </member>
        <member name="T:Game.InvisibleProjectile">
            <summary>
            Projectile used to detect Player
            </summary>
        </member>
        <member name="F:Game.InvisibleProjectile.cShape">
            <summary>
            CircleShape of the Invisible Projectile to be drawn
            </summary>
        </member>
        <member name="M:Game.InvisibleProjectile.#ctor(SFML.System.Vector2f,SFML.System.Vector2f,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="vEntityPosition">StartPosition of the Projectile</param>
            <param name="vDirection">Direction of the Projectile</param>
            <param name="iVelocity">Velocity of the Projectile</param>
        </member>
        <member name="M:Game.InvisibleProjectile.Update">
            <summary>
            Updates the Invisible Projectile
            </summary>
        </member>
        <member name="M:Game.InvisibleProjectile.Draw">
            <summary>
            Returns the CircleShape of the Invisible Projectile to be drawn
            </summary>
            <returns>cShape</returns>
        </member>
        <member name="M:Game.InvisibleProjectile.Move">
            <summary>
            Moves the Invisible Projectile
            </summary>
        </member>
        <member name="M:Game.InvisibleProjectile.Destruct(System.Int32)">
            <summary>
            Destructor of the Projectile
            </summary>
            <param name="iDistanceDetection">Radius of Sight of the Enemy</param>
            <returns>Bool whether Projectile has been destroyed or not</returns>
        </member>
        <member name="T:Game.VisibleProjectile">
            <summary>
            Projectiles that are Visible and inflict Damage when hit on the Opponent
            </summary>
        </member>
        <member name="M:Game.VisibleProjectile.Destruct">
            <summary>
            Destructor of the Projectile
            </summary>
            <returns>Bool whether Projectile has been destroyed or not</returns>
        </member>
        <member name="F:Game.Character.uDamage">
            <summary>
            Base Damage the Character inflicts
            </summary>
        </member>
        <member name="F:Game.Character.vChracterPositionSpace">
            <summary>
            Vector to correct the Characters Position in case of Collision
            </summary>
        </member>
        <member name="M:Game.Character.DisposeProjectile(System.Collections.Generic.List{Game.PlayerProjectile},System.UInt32)">
            <summary>
            Disposes a Projectile from the Projectile List if its Destruct bool is true
            </summary>
        </member>
        <member name="M:Game.Character.CollisionDetection(SFML.System.Vector2f@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Single,System.Single)">
            <summary>
            Updates possible directions of movement based on Collisiondetection
            </summary>
        </member>
        <member name="T:Game.ContentLoader">
            <summary>
            Loads Textures, SoundBuffers and Fonts once and makes them available for all classes. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.fontArial">
            <summary>
            Standard Font. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureTileSheet">
            <summary>
            Texture Sheet with all available tiles. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureTriangleCivil">
            <summary>
            Standard Texture for the Triangle Civil. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureTriangleBandit1">
            <summary>
            First variant for Triangle Bandit Texture. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureTriangleBandit2">
            <summary>
            Second variant for Triangle Bandit Texture. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureTriangleBandit3">
            <summary>
            Third variant for Triangle Bandit Texture. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureTriangleBrute">
            <summary>
            Standard Texture for Triangle Brute. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureTriangleBomber">
            <summary>
            Standard Texture for Triangle Bomber. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureTriangleLord">
            <summary>
            Standard Texture for Triangle Lord. Uses some colors. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureSquareCivil">
            <summary>
            Standard Texture for Square Civils. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureSquareSoldier1">
            <summary>
            First variant for Square Soldier Texture. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureSquareSoldier2">
            <summary>
            Second variant for Square Soldier Texture. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureSquareSoldier3">
            <summary>
            Third variant for Square Soldier Texture. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureSquareCommander">
            <summary>
            Standard Texture for Square Commander. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureSquareGeneral">
            <summary>
            Standard Texture for Square General. Uses some colors. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.texturePentagonCivil">
            <summary>
            Standard Texture for Pentagon Civil. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.texturePentagonCenturio">
            <summary>
            Standard Texture for Pentagon Centurio. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureProjectileVector">
            <summary>
            Standard Texture for Projectile Vector. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.textureProjectileEdge">
            <summary>
            Standard Texture for Projectile Edge. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.soundClick">
            <summary>
            SoundBuffer for click sound. Useful for things like buttons. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.soundProjectileShot">
            <summary>
            SoundBuffer for shooting any projectile. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.soundProjectileImpact">
            <summary>
            SoundBuffer for any projectile impact. 
            </summary>
        </member>
        <member name="F:Game.ContentLoader.soundEnemyDeath">
            <summary>
            SoundBuffer for Enemy death. 
            </summary>
        </member>
        <member name="M:Game.ContentLoader.LoadContent">
            <summary>
            Loads all available Texture, SoundBuffers and Fonts to make them usable. 
            </summary>
        </member>
        <member name="T:Game.EnemyProjectile">
            <summary>
            Projectile that inflcits Damage to the Player when hit
            </summary>
        </member>
        <member name="M:Game.EnemyProjectile.#ctor(System.Single,SFML.System.Vector2f,SFML.System.Vector2f,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="iAngle">Angle to be rotated to</param>
            <param name="vEntityPosition">StartPosition of the Projectile</param>
            <param name="vDirection">Direction of the Projectile</param>
            <param name="iVelocity">Velocity of the Projectile</param>
        </member>
        <member name="M:Game.EnemyProjectile.Update">
            <summary>
            Updates the EnemyProjectile
            </summary>
        </member>
        <member name="M:Game.EnemyProjectile.Move">
            <summary>
            Moves the Projectile
            </summary>
        </member>
        <member name="F:Game.Enemy.vEnemyDirection">
            <summary>
            Direction the Enemy is looking to
            </summary>
        </member>
        <member name="F:Game.Enemy.vEnemyAngleOrigin">
            <summary>
            Origin of Sight, aka "Eye" of the Enemy
            </summary>
        </member>
        <member name="F:Game.Enemy.vEnemyBottomRightPosition">
            <summary>
            Bottom-Right Border of the Enemy
            </summary>
        </member>
        <member name="F:Game.Enemy.vEnemyBottomLeftPosition">
            <summary>
            Bottom-Left Border of the Enemy
            </summary>
        </member>
        <member name="F:Game.Enemy.vRegisteredPlayerPosition">
            <summary>
            If a Player-Projectile collides with the Enemy without having detected the Player, its direction is saved under this Variable.
            Used to inspect the Area where the Projectile came from.
            </summary>
        </member>
        <member name="F:Game.Enemy.iHealth">
            <summary>
            Health of the Enemy
            </summary>
        </member>
        <member name="F:Game.Enemy.uID">
            <summary>
            ID of the Enemy
            </summary>
        </member>
        <member name="F:Game.Enemy.iDistanceDetection">
            <summary>
            Size of the Radius in which the Enemy could detect the Player
            </summary>
        </member>
        <member name="F:Game.Enemy.fAngleEnemy">
            <summary>
            Angle between the PlayerPosition and EnemyDirection taking the EnemyAngleOrigin as Origin,
            updated when in Enemy Radius, Angle and Player is visible
            </summary>
        </member>
        <member name="F:Game.Enemy.fAnglecopy">
            <summary>
            Angle between the PlayerPosition and EnemyDirection taking the EnemyAngleOrigin as Origin, 
            updated when in Enemy Radius and Angle
            </summary>
        </member>
        <member name="F:Game.Enemy.fMaxPermittedAngle">
            <summary>
            Maximum Angle in which the Enemy detects the Player
            </summary>
        </member>
        <member name="F:Game.Enemy.fNumberToCorrect">
            <summary>
            float needed to rotate normally
            </summary>
        </member>
        <member name="F:Game.Enemy.iRandomNumber">
            <summary>
            Random Number created with rRandom to move the Enemy to a random direction
            </summary>
        </member>
        <member name="F:Game.Enemy.Zero">
            <summary>
            Divider to Check if fAngleEnemy is NaN
            </summary>
        </member>
        <member name="F:Game.Enemy.fSpeed">
            <summary>
            Speed of the Enemy
            </summary>
        </member>
        <member name="F:Game.Enemy.bEnemyPlayerCollision">
            <summary>
            True if an Enemy-Player Collision occures
            </summary>
        </member>
        <member name="F:Game.Enemy.bCollisionUp">
            <summary>
            True if Collision on upper Side of the Enemy occures
            </summary>
        </member>
        <member name="F:Game.Enemy.bCollisionDown">
            <summary>
            True if Collision on down Side of the Enemy occures
            </summary>
        </member>
        <member name="F:Game.Enemy.bCollisionRight">
            <summary>
            True if Collision on right Side of the Enemy occures
            </summary>
        </member>
        <member name="F:Game.Enemy.bCollisionLeft">
            <summary>
            True if Collision on left Side of the Enemy occures
            </summary>
        </member>
        <member name="F:Game.Enemy.lProjectile">
            <summary>
            List of Projectiles that the Enemy has thrown
            </summary>
        </member>
        <member name="F:Game.Enemy.lInvisibleProjectileLeft">
            <summary>
            List of Invisible Projectiles that the Enemy has thrown (Left)
            </summary>
        </member>
        <member name="F:Game.Enemy.lInvisibleProjectileMiddle">
            <summary>
            List of Invisible Projectiles that the Enemy has thrown (Middle)
            </summary>
        </member>
        <member name="F:Game.Enemy.lInvisibleProjectileRight">
            <summary>
            List of Invisible Projectiles that the Enemy has thrown (Right)
            </summary>
        </member>
        <member name="F:Game.Enemy.pProjectile">
            <summary>
            Projectile that inflicts Damage to the Player when hit
            </summary>
        </member>
        <member name="F:Game.Enemy.iProjectile">
            <summary>
            Projectile that is used to detect the Player and permits him to hide behind Tiles with Collision
            </summary>
        </member>
        <member name="F:Game.Enemy.cDetecting">
            <summary>
            Clock used for detecting Player for a short period of time even when he's hidden
            </summary>
        </member>
        <member name="F:Game.Enemy.tDetecting">
            <summary>
            Timer used to Measure cDetecting
            </summary>
        </member>
        <member name="F:Game.Enemy.rRandom">
            <summary>
            Random Class to create iRandomNumber
            </summary>
        </member>
        <member name="F:Game.Enemy.Path">
            <summary>
            Path to the TargePosition, Updated by the Pathfinder Algorithm
            </summary>
        </member>
        <member name="F:Game.Enemy.Closed">
            <summary>
            All Nodes that have been evaluated in the Pathfinder Algorithm
            </summary>
        </member>
        <member name="F:Game.Enemy.CurrentGoalOrigin">
            <summary>
            Position of the next Node that the Enmey moves to when following the Path created by the Pathfinder Algorithm. Vector uses sEntity.Position as Origin
            </summary>
        </member>
        <member name="F:Game.Enemy.CurrentGoal">
            <summary>
            Position of the next Node that the Enmey moves to when following the Path created by the Pathfinder Algorithm
            </summary>
        </member>
        <member name="F:Game.Enemy.DisposingInvisibleListLeft">
            <summary>
            Indicates whether the last Projectile of the lInvisibleProjectileLeft has been disposed or not 
            </summary>
        </member>
        <member name="F:Game.Enemy.DisposingInvisibleListMiddle">
            <summary>
            Indicates whether the last Projectile of the lInvisibleProjectileMiddle has been disposed or not 
            </summary>
        </member>
        <member name="F:Game.Enemy.DisposingInvisibleListRight">
            <summary>
            Indicates whether the last Projectile of the lInvisibleProjectileRight has been disposed or not 
            </summary>
        </member>
        <member name="F:Game.Enemy.bAlert">
            <summary>
            True if Enemy has detected Player, used to Alert other Enemies nearby
            </summary>
        </member>
        <member name="F:Game.Enemy.iHealthMax">
            <summary>
            Maximal Health of the Enemy
            </summary>
        </member>
        <member name="M:Game.Enemy.DetectPlayer">
            <summary>
            Returns true if the Player is in the Radius and Angle of Sight of the Enemy and isn't hidden behind a Tile with Collision
            </summary>
        </member>
        <member name="M:Game.Enemy.DisposeInvisibleProjectile(System.Collections.Generic.List{Game.InvisibleProjectile})">
            <summary>
            Disposes the Invisible Projectiles and returns true when Projectile-Player Collision occures
            </summary>
            <param name="lProjectile">List of all Invisible Projectiles that the Enemy has fired</param>
        </member>
        <member name="M:Game.Enemy.PlayerProjectileCollision(Game.InvisibleProjectile)">
            <summary>
            Detects Collision between Player and Invisible Projectile, returns true if Collision occures
            </summary>
            <param name="iProjectile">Projectile that Collision is checked with</param>
        </member>
        <member name="M:Game.Enemy.ShootInvisible(SFML.System.Vector2f,System.Single)">
            <summary>
            Shoots fast invisible Projectiles to check Visibility
            </summary>
            <param name="TileMapPosition">Position of the TileMap</param>
            <param name="fAngle">Angle where to shoot the Invisible Projectile to</param>
        </member>
        <member name="M:Game.Enemy.Alert">
            <summary>
            Alerts other Enemys in a determined Radius if Player is detected
            </summary>
        </member>
        <member name="M:Game.Enemy.RotateEnemy(System.Single@,SFML.System.Vector2f)">
            <summary>
            Rotates the Enemy towards the Player
            </summary>
        </member>
        <member name="M:Game.Enemy.PlayerEnemyCollision(SFML.System.Vector2f@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Detects Collision between Player and Enemy and returns Collision direction
            </summary>
            <param name="vVirtualPlayerPosition">Virtual PlayerPosition, aka Position if Player would be moving, no the Map</param>
            <param name="up">Bool that prohibites Up-Movement of the Player if true</param>
            <param name="down">Bool that prohibites Down-Movement of the Player if true</param>
            <param name="right">Bool that prohibites Right-Movement of the Player if true</param>
            <param name="left">Bool that prohibites Left-Movement of the Player if true</param>
        </member>
        <member name="M:Game.Enemy.EnemyEnemyCollision(SFML.System.Vector2f@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Detects Collision between Enemies and returns Collision direction
            </summary>
            <param name="vEntityPosition">Position of the Enemy if Player would be moving, not the Map</param>
            <param name="up">Bool that prohibites Up-Movement of the Enemy if true</param>
            <param name="down">Bool that prohibites Down-Movement of the Enemy if true</param>
            <param name="right">Bool that prohibites Right-Movement of the Enemy if true</param>
            <param name="left">Bool that prohibites Left-Movement of the Enemy if true</param>
        </member>
        <member name="M:Game.Enemy.ReduceHealth(System.UInt32,SFML.System.Vector2f)">
            <summary>
            Reduces Health of the Enemy, makes him rotate to the Player and registers his Position
            </summary>
            <param name="Damage">Damage that the Enemy takes</param>
            <param name="Direction">Direction of the impacted Projectile</param>
        </member>
        <member name="M:Game.Enemy.Move">
            <summary>
            Moves the Enemy
            </summary>
        </member>
        <member name="M:Game.Enemy.MoveUp">
            <summary>
            Moves the Enemy Up
            </summary>
        </member>
        <member name="M:Game.Enemy.MoveDown">
            <summary>
            Moves the Enemy Down
            </summary>
        </member>
        <member name="M:Game.Enemy.MoveLeft">
            <summary>
            Moves the Enemy to the Left
            </summary>
        </member>
        <member name="M:Game.Enemy.MoveRight">
            <summary>
            Moves the Enemy to the Right
            </summary>
        </member>
        <member name="M:Game.Enemy.GetSprite">
            <summary>
            Gets the Sprite of the Enemy
            </summary>        
        </member>
        <member name="M:Game.Enemy.GetHealth">
            <summary>
            Gets the Health of the Enemy
            </summary>
        </member>
        <member name="M:Game.Enemy.ShowVectors">
            <summary>
            Shows all the used Vectors of the Enemy, including Sight Radius, Angle and Invisible Projectiles
            </summary>
        </member>
        <member name="M:Game.Enemy.DrawPathFinder(SFML.Graphics.Font)">
            <summary>
            Shows all the used Nodes in the Path Finding Algorithm
            </summary>
        </member>
        <member name="M:Game.Enemy.Update(SFML.System.Vector2f@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Updates Enemy Logic
            </summary>
            <param name="VirtualPlayerPosition"></param>
            <param name="up"></param>
            <param name="down"></param>
            <param name="right"></param>
            <param name="left"></param>
        </member>
        <member name="M:Game.Enemy.Draw">
            <summary>
            Returns a List with all the Elements to Draw
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Enemy.PassiveUpdate">
            <summary>
            Updates only EnemyPosition, used to optimize performance
            </summary>
        </member>
        <member name="M:Game.Enemy.PathFinder(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            PathFinder Algorithm, searches the shortest way from the EnemyPosition to the PlayerPosition respecting Tiles with Collision
            </summary>
            <param name="vPosition">StartPosition, Pathfinder starts here</param>
            <param name="vTargetPosition">Position where the Pathfinder looks for a path to get</param>
        </member>
        <member name="M:Game.Enemy.CreateNeighbours(System.Int32,System.Int32,Game.Node[]@,Game.Tilez[0:,0:],Game.Node,Game.Node)">
            <summary>
            Initializes an Array of Nodes that surrounds the nCurrent Node in the Pathfinder
            </summary>
            <param name="X">X Coordinate of nCurrent's Position</param>
            <param name="Y">Y Coordinate of nCurrent's Position</param>
            <param name="anNeighbour">Array of Nodes to be initialised</param>
            <param name="tManager">2 Dimensional Array of Tilez needed for giving each Node in anNeighbour their Tilez Type</param>
            <param name="nCurrent">Node being evaluated</param>
            <param name="nTargetNode">Node where the Pathfinder looks for a path to get</param>
        </member>
        <member name="T:Game.Entity">
            <summary>
            Object that has a Position, Texture and Sprite
            </summary>
        </member>
        <member name="F:Game.Entity.vEntityPosition">
            <summary>
            Position (on the Top Left) of the Entity
            </summary>
        </member>
        <member name="F:Game.Entity.vEntityPositionBottomLeft">
            <summary>
            Position (on the Bottom Left) of the Entity
            </summary>
        </member>
        <member name="F:Game.Entity.vEntityPositionTopRight">
            <summary>
            Position (on the Top Right) of the Entity
            </summary>
        </member>
        <member name="F:Game.Entity.tTileMap">
            <summary>
            Tilemap used for Collisiondetection
            </summary>
        </member>
        <member name="F:Game.Entity.eAppearance">
            <summary>
            Determines look of the Entity. 
            </summary>
        </member>
        <member name="F:Game.Entity.tEntity">
            <summary>
            Texture of the Entity
            </summary>
        </member>
        <member name="F:Game.Entity.sEntity">
            <summary>
            Sprite of the Entity
            </summary>
        </member>
        <member name="F:Game.Entity.bIsBoss">
            <summary>
            True if Enemy is Boss-type. Default is false. 
            </summary>
        </member>
        <member name="M:Game.Entity.GetAppearance">
            <summary>
            Gets the Appearance of the Enemy
            </summary>
            <returns>eAppearance</returns>
        </member>
        <member name="M:Game.Entity.GetVirtualPosition">
            <summary>
            Gets the virtual Position of the Entity (aka if the Player would move, not the Map)
            </summary>
            <returns>vEntityPosition</returns>
        </member>
        <member name="M:Game.Entity.GetPosition">
            <summary>
            Gets the Position of the Entity
            </summary>
        </member>
        <member name="M:Game.Entity.GetIsBoss">
            <summary>
            Returns true if Enemy is Boss-type
            </summary>
            <returns>bIsBoss</returns>
        </member>
        <member name="M:Game.Entity.CollisionDetection(SFML.System.Vector2f,System.UInt32,System.UInt32)">
            <summary>
            Detects the Entity Collision
            Returns 0 if no Collision
            </summary>
        </member>
        <member name="M:Game.Entity.SimpleCollisionDetection(SFML.System.Vector2f,System.UInt32,System.UInt32)">
            <summary>
            Simple Collision Detection, return true if Collision
            </summary>
            <param name="vEntityPosition">Position of the Entity</param>
            <param name="uWidth">Width of the tEntity</param>
            <param name="uHeight">Height of the tEntity</param>
        </member>
        <member name="M:Game.Entity.GetAppearanceTexture">
            <summary>
            A protected function to get the correct Texture from the Content Loader depending on the chosen Appearance. Default is Triangle Civil. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Game.EntityArrayCreation">
            <summary>
            Use to create an array of enemies out of the underlying tile map and the chosen enemy layout. 
            </summary>
        </member>
        <member name="F:Game.EntityArrayCreation.iNumberColumns">
            <summary>
            Generated out off the values the tile array in the constructor. 
            </summary>
        </member>
        <member name="F:Game.EntityArrayCreation.iNumberRows">
            <summary>
            Generated out off the values the tile array in the constructor. 
            </summary>
        </member>
        <member name="F:Game.EntityArrayCreation.enemy2Array">
            <summary>
            Created dependant on the underlying tile map. Ensured to not spawn entities on tiles with collision or out of the map boarders. 
            </summary>
        </member>
        <member name="F:Game.EntityArrayCreation.uiId">
            <summary>
            Number used to mark created Enemies. 
            </summary>
        </member>
        <member name="F:Game.EntityArrayCreation.rRandom">
            <summary>
            Random function soly used to randomize appearance of certain entities. 
            </summary>
        </member>
        <member name="M:Game.EntityArrayCreation.GetEntityArray">
            <summary>
            Returns the two dimensional entity array created out of the chosen .txt file. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.EntityArrayCreation.GetNumberColumns">
            <summary>
            Returns an integer reflecting the number of columns of the created entity array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.EntityArrayCreation.GetNumberRows">
            <summary>
            Returns an integer reflecting the number of rows of the created entity array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.EntityArrayCreation.#ctor(Game.TileManager,System.String[])">
            <summary>
            Creation of the entity array happens in the constructor and is used to spawn enemies at the start of a game. Depends on the underlying tile array and a specific string array. Entities placed out off the maps boarders or on tiles with collision are ignored in the creation process. 
            </summary>
            <param name="tileManager"></param>
            <param name="stringEnemyLayout"></param>
        </member>
        <member name="M:Game.EntityArrayCreation.EnemyConversation(System.Char,Game.TileManager,System.Int32,System.Int32)">
            <summary>
            Returns an entity depending on the used char and gives them correspondening values. Default is null. 
            </summary>
            <param name="chType"></param>
            <param name="tileManager"></param>
            <param name="iXCoord"></param>
            <param name="iYCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Game.EntityArrayCreation.AppearanceRandomizer(System.Int32)">
            <summary>
            Function used to give entities with optional appearances one. Input case 4 stands for Square Soldiers. Every other case will be Triangle Bandits. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Game.EntityAppearance">
            <summary>
            Public enum used to save and determine Entity appareance, except for the players one. 
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.TriangleCivil">
            <summary>
            TriangleCivil Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.TriangleBandit1">
            <summary>
            TriangleBandit1 Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.TriangleBandit2">
            <summary>
            TriangleBandit2 Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.TriangleBandit3">
            <summary>
            TriangleBandit3 Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.TriangleBrute">
            <summary>
            TriangleBrute Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.TriangleBomber">
            <summary>
            TriangleBomber Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.TriangleLord">
            <summary>
            TriangleLord Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.SquareCivil">
            <summary>
            SquareCivil Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.SquareSoldier1">
            <summary>
            SquareSoldier1 Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.SquareSoldier2">
            <summary>
            SquareSoldier2 Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.SquareSoldier3">
            <summary>
            SquareSoldier3 Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.SquareCommander">
            <summary>
            SquareCommander Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.SquareGeneral">
            <summary>
            SquareGeneral Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.PentagonCivil">
            <summary>
            PentagonCivil Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.PentagonCenturio">
            <summary>
            PentagonCenturio Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.ProjectileVector">
            <summary>
            ProjectileVector Appearance
            </summary>
        </member>
        <member name="F:Game.EntityAppearance.ProjectileEdge">
            <summary>
            ProjectileEdge Appearance
            </summary>
        </member>
        <member name="T:Game.EntityManager">
            <summary>
            Uses EntityArrayCreation to make the enemy array. Is able to return it in form of a list. 
            </summary>
        </member>
        <member name="F:Game.EntityManager.entityArrayCreation">
            <summary>
            Instance of this class to create the initial entity array out a txt file. 
            </summary>
        </member>
        <member name="M:Game.EntityManager.GetEnemyArray">
            <summary>
            Returns the two dimensional entity array created by the included instance of entityArrayCreation. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.EntityManager.GetArrayNumberColumns">
            <summary>
            Returns an integer reflecting the number of Columns of the enemy array created by the underlying Creator. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.EntityManager.GetArrayNumberRows">
            <summary>
            Returns an integer reflecting the number of Rows of the enemy array created by the underlying Creator. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.EntityManager.#ctor(Game.TileManager,System.String[])">
            <summary>
            Requires the Instance of TileManager und the .txt file used to create the current level. 
            </summary>
            <param name="tileManager"></param>
            <param name="sEnemyLayout"></param>
        </member>
        <member name="M:Game.EntityManager.ReturnListCreatedOutOfArray">
            <summary>
            Returns a list of Enemies created in dependency of the initial Entity array, so Enemies get their type and spawn location. 
            </summary>
            <returns></returns>
        </member>
        <member name="F:Game.GameLoop.Window">
            <summary>
            Window to be rendered
            </summary>
        </member>
        <member name="F:Game.GameLoop.ClearColor">
            <summary>
            Color that is displayed after clearing the Window
            </summary>
        </member>
        <member name="F:Game.GameLoop.windowWidth">
            <summary>
            Width of Window
            </summary>
        </member>
        <member name="F:Game.GameLoop.windowHeight">
            <summary>
            Height of Window
            </summary>
        </member>
        <member name="F:Game.GameLoop.cFpsReview">
            <summary>
            Clock used to measure one Second
            </summary>
        </member>
        <member name="F:Game.GameLoop.cFpsSet">
            <summary>
            Clock used to measure ellapsed Time
            </summary>
        </member>
        <member name="F:Game.GameLoop.tFpsSet">
            <summary>
            Timer used to calculate  when to update the Game Logic
            </summary>
        </member>
        <member name="F:Game.GameLoop.tFpsReview">
            <summary>
            Timer used to calculate the FPS
            </summary>
        </member>
        <member name="F:Game.GameLoop.iframesreview">
            <summary>
            Amount of frames updated in 1 Second
            </summary>
        </member>
        <member name="F:Game.GameLoop.iFPSlimit">
            <summary>
            Limit of Frames per Seconds in the Game Logic
            </summary>
        </member>
        <member name="F:Game.GameLoop.UpdateTime">
            <summary>
            Indicates whether the Game has been drawed since the last Upadte or not
            </summary>
        </member>
        <member name="M:Game.GameLoop.#ctor(System.String,SFML.Graphics.Color)">
            <summary>
            Gameloop constructor
            </summary>
            <param name="title">Text on the top of the Window, aka Title of the Game</param>
            <param name="ClearColor">Color that is displayed after clearing the Window</param>
        </member>
        <member name="M:Game.GameLoop.Run">
            <summary>
            Gameloop Update
            </summary>
        </member>
        <member name="M:Game.GameLoop.Initialize">
            <summary>
            Initializes Variables
            </summary>
        </member>
        <member name="M:Game.GameLoop.Update">
            <summary>
            Updates the Game
            </summary>
        </member>
        <member name="M:Game.GameLoop.Draw">
            <summary>
            Draws the Game
            </summary>
        </member>
        <member name="M:Game.GameLoop.OnClosed(System.Object,System.EventArgs)">
            <summary>
            Closes Window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Game.GameLoop.GetWindowSize">
            <summary>
            Gets the Window Size of the Game
            </summary>
            <returns>Window Size</returns>
        </member>
        <member name="T:Game.Input">
            <summary>
            Manages the Input Data
            </summary>
        </member>
        <member name="F:Game.Input.vMousePosition">
            <summary>
            Position of the Mouse
            </summary>
        </member>
        <member name="F:Game.Input.Shoot">
            <summary>
            Bool whether Key to Shoot is pressed or not
            </summary>
        </member>
        <member name="F:Game.Input.bMovingUp">
            <summary>
            Bool whether Player is allowed to move up or not
            </summary>
        </member>
        <member name="F:Game.Input.bMovingDown">
            <summary>
            Bool whether Player is allowed to move down or not
            </summary>
        </member>
        <member name="F:Game.Input.bMovingRight">
            <summary>
            Bool whether Player is allowed to move right or not
            </summary>
        </member>
        <member name="F:Game.Input.bMovingLeft">
            <summary>
            Bool whether Player is allowed to move left or not
            </summary>
        </member>
        <member name="F:Game.Input.bMousePressed">
            <summary>
            Bool whether the left MouseButton is pressed or not
            </summary>
        </member>
        <member name="F:Game.Input.fPlayerVelocity">
            <summary>
            Velocity of the Player
            </summary>
        </member>
        <member name="M:Game.Input.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Game.Input.Update(SFML.System.Vector2f@,System.Single@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SFML.Graphics.RenderWindow)">
            <summary>
            Updates Virtual CharacterPosition and its Velocity based on Player Input
            </summary>
        </member>
        <member name="T:Game.Sounds">
            <summary>
            A  list of available sounds. 
            </summary>
        </member>
        <member name="F:Game.Sounds.Click">
            <summary>
            Click Sound
            </summary>
        </member>
        <member name="F:Game.Sounds.Shot">
            <summary>
            Shot Sound
            </summary>
        </member>
        <member name="F:Game.Sounds.Impact">
            <summary>
            Impact Sound
            </summary>
        </member>
        <member name="F:Game.Sounds.Death">
            <summary>
            Death Sound
            </summary>
        </member>
        <member name="T:Game.SoundManager">
            <summary>
            Static class. Allows all other classes to play wished sounds from the correspondending enum Sounds. 
            </summary>
        </member>
        <member name="F:Game.SoundManager.iNumberOfSounds">
            <summary>
            Hardcoded number of available sounds. 
            </summary>
        </member>
        <member name="F:Game.SoundManager.sound2Array">
            <summary>
            Contains all available sounds. 
            </summary>
        </member>
        <member name="F:Game.SoundManager.sounds2ArrayNames">
            <summary>
            Contains the name of the sound at the number of the correspondending sound array. 
            </summary>
        </member>
        <member name="M:Game.SoundManager.#cctor">
            <summary>
            Constructor knows what to do, no input and output necessary. 
            </summary>
        </member>
        <member name="M:Game.SoundManager.PlaySpecificSound(Game.Sounds)">
            <summary>
            Static method to play a chosen sound. Accepts sound names from the public enum Sounds. 
            </summary>
            <param name="eName"></param>
        </member>
        <member name="T:Game.MapState">
            <summary>
            MapState
            </summary>
        </member>
        <member name="F:Game.MapState.eTargetMap">
            <summary>
            Target Map of the Map
            </summary>
        </member>
        <member name="F:Game.MapState.fFont">
            <summary>
            Font used in the Maps
            </summary>
        </member>
        <member name="F:Game.MapState.vTileMapPosition">
            <summary>
            Position of the TileMap
            </summary>
        </member>
        <member name="F:Game.MapState.sMapString">
            <summary>
            String Array that provides the different Tilez of the TileMap
            </summary>
        </member>
        <member name="F:Game.MapState.sEnemyLayoutString">
            <summary>
            String Array that provides the different Enemies of the EntityManager
            </summary>
        </member>
        <member name="F:Game.MapState.lDrawList">
            <summary>
            List to be drawed
            </summary>
        </member>
        <member name="F:Game.MapState.tTileUndHerrsche">
            <summary>
            TileManager to draw Tilez as provided by Content\MainMap.txt
            </summary>
        </member>
        <member name="F:Game.MapState.eEntityManager">
            <summary>
            EntityManager to spawn Enemies as provided by Content\MainMapEnemies.txt
            </summary>
        </member>
        <member name="F:Game.MapState.pPlayer">
            <summary>
            Instance of the Player
            </summary>
        </member>
        <member name="F:Game.MapState.cCamera">
            <summary>
            Instance of the Camera
            </summary>
        </member>
        <member name="M:Game.MapState.Initialize">
            <summary>
            Initializes Variables of the Map
            </summary>
        </member>
        <member name="M:Game.MapState.Update(SFML.Graphics.RenderWindow)">
            <summary>
            Updates the Map
            </summary>
            <param name="rWindow">Used to get MousePosition relative to the WindowOrigin</param>
            <returns>eTargetMap</returns>
        </member>
        <member name="M:Game.MapState.Draw(SFML.Graphics.RenderWindow)">
            <summary>
            Returns a List with all the Elements to be drawed besides the TileMap
            </summary>
            <param name="rWindow">Used to draw the TileMap</param>
            <returns>lDrawList</returns>
        </member>
        <member name="T:Game.eMapState">
            <summary>
            MapStates of the Game
            </summary>
        </member>
        <member name="F:Game.eMapState.ssUndefined">
            <summary>
            Undefined Map State
            </summary>
        </member>
        <member name="F:Game.eMapState.ssMain">
            <summary>
            Main Map of the Game
            </summary>
        </member>
        <member name="T:Game.TextStreamer">
            <summary>
            Shows a chosen text string to the player. Allows different overloads to change otherwise automaticly generated appearance values. Can be used by all other classes. 
            </summary>
        </member>
        <member name="F:Game.TextStreamer.font">
            <summary>
            Standard Font used to show the texts. 
            </summary>
        </member>
        <member name="F:Game.TextStreamer.textColor">
            <summary>
            Standard Color of the texts. 
            </summary>
        </member>
        <member name="F:Game.TextStreamer.text">
            <summary>
            The input string gets converted into this Text. 
            </summary>
        </member>
        <member name="F:Game.TextStreamer.uiSize">
            <summary>
            Standard size of the texts characters. 
            </summary>
        </member>
        <member name="M:Game.TextStreamer.TextForPlayer(System.String,SFML.System.Vector2f)">
            <summary>
            Prints the chosen Text at a specific location. Takes up to 4 Overloads for additional influence on the drawing. 
            </summary>
            <param name="sIinput"></param>
            <param name="v2fPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Game.TextStreamer.TextForPlayer(System.String,SFML.Graphics.Color)">
            <summary>
            Allows change of the text color. 
            </summary>
            <param name="sInput"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Game.TextStreamer.TextForPlayer(System.String,SFML.Graphics.Color,System.UInt32)">
            <summary>
            Allows change of the displayed characters size. 
            </summary>
            <param name="sInput"></param>
            <param name="color"></param>
            <param name="uiCharacterSize"></param>
            <returns></returns>
        </member>
        <member name="M:Game.TextStreamer.TextForPlayer(System.String,SFML.Graphics.Color,System.UInt32,System.UInt32)">
            <summary>
            Allows to move the display position of the text by a certain factor of the characters size. 
            </summary>
            <param name="sInput"></param>
            <param name="color"></param>
            <param name="uiCharacterSize"></param>
            <param name="uiColumnFactor"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Node">
            <summary>
            Tilez with detailed Variables, used for Path Finding Algorithm
            </summary>
        </member>
        <member name="F:Game.Node.tTile">
            <summary>
            Tilez Type of the Node
            </summary>
        </member>
        <member name="F:Game.Node.iGCost">
            <summary>
            iGCost of the Node, aka Distance to the StartNode
            </summary>
        </member>
        <member name="F:Game.Node.iHCost">
            <summary>
            iHCost of the Node, aka Distance to the TargetNode
            </summary>
        </member>
        <member name="F:Game.Node.iFCost">
            <summary>
            iGCost added with iHCost
            </summary>
        </member>
        <member name="F:Game.Node.bCollision">
            <summary>
            Indicates whether the Node has Collision or not
            </summary>
        </member>
        <member name="F:Game.Node.vPosition">
            <summary>
            Position of the Node
            </summary>
        </member>
        <member name="F:Game.Node.nParent">
            <summary>
            Node that the iGCost ist added with, aka ParentNode
            </summary>
        </member>
        <member name="F:Game.Node.nChild">
            <summary>
            Node that inherites the iGCost, aka ChildNode
            </summary>
        </member>
        <member name="F:Game.Node.nStartNode">
            <summary>
            SartNode of the Node
            </summary>
        </member>
        <member name="F:Game.Node.nTargetNode">
            <summary>
            TargetNode of the Node, necessary for calculating iHCost
            </summary>
        </member>
        <member name="M:Game.Node.#ctor(Game.Tilez,SFML.System.Vector2f,Game.Node,Game.Node)">
            <summary>
            Constructor of a normal Node
            </summary>
            <param name="tTile">Tile of the Node</param>
            <param name="vPosition">Position of the Node</param>
            <param name="nParentNode">ParentNode of the Node</param>
            <param name="nTargetNode">TargetNode of the Node</param>
        </member>
        <member name="M:Game.Node.#ctor(Game.Tilez,SFML.System.Vector2f,Game.Node,System.Boolean,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor of a ChildNode
            </summary>
            <param name="tTile">Tile of the ParentNode</param>
            <param name="vPosition">Position of the ParentNode</param>
            <param name="nTargetNode">targetNode of the ParentNode</param>
            <param name="bCollision">Collision of the ParentNode</param>
            <param name="iGCost">iGCost of the ParentNode</param>
            <param name="iHCost">iHCost of the ParentNode</param>
            <param name="iFCost">iFCost of the ParentNode</param>
        </member>
        <member name="M:Game.Node.#ctor(Game.Tilez,SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Constructor of a StartNode (= A Node)
            </summary>
            <param name="tTile">Tile of the Node</param>
            <param name="vPosition">Position of the Node</param>
            <param name="vTargetVector">Position of the TargetNode</param>
        </member>
        <member name="M:Game.Node.#ctor(Game.Tilez,SFML.System.Vector2f,Game.Node)">
            <summary>
            Constrcutor of a TargetNode (=B Node)
            </summary>
            <param name="tTile">Tile of the Node</param>
            <param name="vPosition">Position of the Node</param>
            <param name="nStartNode">StartNode (= A Node)</param>
        </member>
        <member name="M:Game.Node.SetiGCost">
            <summary>
            Calculates iGCost: Cost of 10 for Vertical/Horizontal, 14 for Diagonal
            </summary>
        </member>
        <member name="M:Game.Node.SetiHCost(SFML.System.Vector2f)">
            <summary>
            Calculates iHCost: Cost of 10 for each Vertical/Horizontal, 14 for each Diagonal Node in between
            </summary>
        </member>
        <member name="M:Game.Node.Collisionreturner(Game.Tilez)">
            <summary>
            Indicates whether the Tilez has Collsion or not
            </summary>
            <param name="tTile">Tilez to be checked</param>
        </member>
        <member name="T:Game.MainMap">
            <summary>
            Main Map of the Game
            </summary>
        </member>
        <member name="F:Game.MainMap.vPlayerVirtualPosition">
            <summary>
            Virtual Position of the Character, aka Position if the Player would move, not the map
            </summary>
        </member>
        <member name="F:Game.MainMap.vPlayerStartPosition">
            <summary>
            Position where the Player is Spawned
            </summary>
        </member>
        <member name="F:Game.MainMap.vPastTileMapPosition">
            <summary>
            TileMapPosition of the last frame
            </summary>
        </member>
        <member name="F:Game.MainMap.vDifferenceTileMapPosition">
            <summary>
            Difference of the present to the past TileMapPosition
            </summary>
        </member>
        <member name="F:Game.MainMap.vPresentTileMapPosition">
            <summary>
            TileMapPosition of the current frame
            </summary>
        </member>
        <member name="F:Game.MainMap.uiKillCount">
            <summary>
            Counts how many Bosses the Player has killed
            </summary>
        </member>
        <member name="F:Game.MainMap.textQuest">
            <summary>
            Displays how many Bosses are in the Game
            </summary>
        </member>
        <member name="F:Game.MainMap.questTracker">
            <summary>
            Tracks how many Bosses remain on the Map
            </summary>
        </member>
        <member name="F:Game.MainMap.cText">
            <summary>
            Clock to hide the Text after a determined Time
            </summary>
        </member>
        <member name="F:Game.MainMap.tText">
            <summary>
            Timer to measure cText
            </summary>
        </member>
        <member name="F:Game.MainMap.iInput">
            <summary>
            Input Instance for Managing Input Data
            </summary>
        </member>
        <member name="F:Game.MainMap.right">
            <summary>
            Bools that indicate whether the Player can move in the given direction
            </summary>
        </member>
        <member name="F:Game.MainMap.left">
            <summary>
            Bools that indicate whether the Player can move in the given direction
            </summary>
        </member>
        <member name="F:Game.MainMap.up">
            <summary>
            Bools that indicate whether the Player can move in the given direction
            </summary>
        </member>
        <member name="F:Game.MainMap.down">
            <summary>
            Bools that indicate whether the Player can move in the given direction
            </summary>
        </member>
        <member name="F:Game.MainMap.lEnemies">
            <summary>
            List with all Enemies that are alive
            </summary>
        </member>
        <member name="M:Game.MainMap.#ctor">
            <summary>
            Constructor of the MainMap
            </summary>
        </member>
        <member name="M:Game.MainMap.Initialize">
            <summary>
            Initializes Objects of the MainMap
            </summary>
        </member>
        <member name="M:Game.MainMap.Update(SFML.Graphics.RenderWindow)">
            <summary>
            Updates the Main Map Logic
            </summary>
        </member>
        <member name="M:Game.MainMap.Draw(SFML.Graphics.RenderWindow)">
            <summary>
            Returns a List of the Elements to be drawed
            Custom List is used to to add Lists rapidly
            </summary>
        </member>
        <member name="M:Game.MainMap.GetDiffTileMapPosition">
            <summary>
            Gets the vDifferenceTileMapPosition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.MainMap.GetTileMapPosition">
            <summary>
            Gets the vTileMapPosition
            </summary>
        </member>
        <member name="M:Game.MainMap.GetVirtualCharacterPosition">
            <summary>
            Gets the vPlayerVirtualPosition
            </summary>
        </member>
        <member name="M:Game.MainMap.GetStartCharacterPosition">
            <summary>
            Gets the vPlayerStartPosition
            </summary>
        </member>
        <member name="M:Game.MainMap.GetEnemies">
            <summary>
            Returns a List with all the active Enemies on the Map
            </summary>
        </member>
        <member name="M:Game.MainMap.GetTileManager">
            <summary>
            Returns the active TileManager. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Game.CustomList">
            <summary>
            Class Used for simplifying the use of Lists
            </summary>
        </member>
        <member name="F:Game.CustomList.lDrawList">
            <summary>
            List to be drawed
            </summary>
        </member>
        <member name="M:Game.CustomList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Game.CustomList.Count">
            <summary>
            Counts the Elements of lDrawList
            </summary>
        </member>
        <member name="M:Game.CustomList.AddElement(SFML.Graphics.Drawable)">
            <summary>
            Adds an Element to the lDrawList
            </summary>
            <param name="Ddrawable">Drawable to be added to the List</param>
        </member>
        <member name="M:Game.CustomList.AddList(System.Collections.Generic.List{SFML.Graphics.Drawable})">
            <summary>
            Adds a List to the lDrawList
            </summary>
            <param name="lDrawList"></param>
        </member>
        <member name="M:Game.CustomList.AddProjectiles(System.Collections.Generic.List{SFML.Graphics.Drawable},System.Collections.Generic.List{Game.EnemyProjectile})">
            <summary>
            Adds an EnemyProjectile List to a specified List
            </summary>
            <param name="lDrawList">DrawList</param>
            <param name="lEnemyProjectile">EnemyProjectile List that will be added to the DrawList</param>
            <returns>Merged List</returns>
        </member>
        <member name="M:Game.CustomList.AddProjectiles(System.Collections.Generic.List{SFML.Graphics.Drawable},System.Collections.Generic.List{Game.InvisibleProjectile})">
            <summary>
            Adds a InvisibleProjectile List to a specified List
            </summary>
            <param name="lDrawList">DrawList</param>
            <param name="lInvisibleProjectile">InvisibleProjectile List that will be added to the DrawList</param>
            <returns>Merged List</returns>
        </member>
        <member name="M:Game.CustomList.AddProjectiles(System.Collections.Generic.List{SFML.Graphics.Drawable},System.Collections.Generic.List{Game.PlayerProjectile})">
            <summary>
            Adds a PlayerProjectile List to a specified List
            </summary>
            <param name="lDrawList">DrawList</param>
            <param name="lPlayerProjectile">PlayerProjectile List that will be added to the DrawList</param>
            <returns>Merged List</returns>
        </member>
        <member name="M:Game.CustomList.Draw">
            <summary>
            Draws the lDrawList
            </summary>
            <returns>lDrawList</returns>
        </member>
        <member name="T:Game.PlayerProjectile">
            <summary>
            Projectile that is thrown by the Player to inflict Damage to the Enemy
            </summary>
        </member>
        <member name="F:Game.PlayerProjectile.iDistance">
            <summary>
            Distance to the MousePosition
            </summary>
        </member>
        <member name="F:Game.PlayerProjectile.vPlayerMovement">
            <summary>
            Vector to be added when Player moves
            </summary>
        </member>
        <member name="M:Game.PlayerProjectile.#ctor(System.Single,SFML.System.Vector2f,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="iAngle">Angle to be rotated to</param>
            <param name="vDirection">Direction of the Projectile</param>
            <param name="iVelocity">Velocity of the Projectile</param>
        </member>
        <member name="M:Game.PlayerProjectile.Update">
            <summary>
            Updates the PlayerProjectile
            </summary>
        </member>
        <member name="M:Game.PlayerProjectile.Move">
            <summary>
            Moves the PlayerProjectile
            </summary>
        </member>
        <member name="F:Game.Player.iLevel">
            <summary>
            Level of the Player, aka how many Edges it has
            </summary>
        </member>
        <member name="F:Game.Player.sCharacter">
            <summary>
            Circle Shape of the Player to be drawn
            </summary>
        </member>
        <member name="F:Game.Player.fHealth">
            <summary>
            Current Health of the Player
            </summary>
        </member>
        <member name="F:Game.Player.fSpeed">
            <summary>
            Speed of the Player
            </summary>
        </member>
        <member name="F:Game.Player.iHealthMax">
            <summary>
            Maximal Health of the Player
            </summary>
        </member>
        <member name="F:Game.Player.vPlayerPosition">
            <summary>
            Virtual Position of the Player
            </summary>
        </member>
        <member name="F:Game.Player.vMousePositionFromPlayer">
            <summary>
            Position of hte Mouse using Player Position as Origin
            </summary>
        </member>
        <member name="F:Game.Player.pProjectile">
            <summary>
            Projectile that inflicts damage to the Enemy when hit
            </summary>
        </member>
        <member name="F:Game.Player.lProjectile">
            <summary>
            List of all thrown but not impacted Projectiles of the Player
            </summary>
        </member>
        <member name="F:Game.Player.cShoot">
            <summary>
            Clock used for shooting a determined numer of times per second
            </summary>
        </member>
        <member name="F:Game.Player.tShoot">
            <summary>
            Timer used for measuring cShoot
            </summary>
        </member>
        <member name="F:Game.Player.cRegenarate">
            <summary>
            Clock used for starting to regenerate after a determined numer of seconds
            </summary>
        </member>
        <member name="F:Game.Player.tRegenerate">
            <summary>
            Timer used for measuring cRegenerate
            </summary>
        </member>
        <member name="M:Game.Player.#ctor(SFML.System.Vector2f)">
            <summary>
            Constructor
            </summary>
            <param name="VirtualCharacterPosition">Virtual Position of the Player, aka Position if the Player would move, not the Map</param>
        </member>
        <member name="M:Game.Player.Update(SFML.System.Vector2f@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Updates Player Logic
            </summary>
            <param name="VirtualPlayerPosition">Virtual Player Position, aka Position if the Player would move, not the Map</param>
            <param name="up">Bool allowing up Movement</param>
            <param name="down">Bool allowing down Movement</param>
            <param name="right">Bool allowing right Movement</param>
            <param name="left">Bool allowing left Movement</param>
        </member>
        <member name="M:Game.Player.Draw">
            <summary>
            Returns a List with all the Elements of the Player to be drawed
            </summary>
            <returns>lDrawList</returns>
        </member>
        <member name="M:Game.Player.PlayerRotation">
            <summary>
            Rotates Player towards the Mouse
            </summary>
        </member>
        <member name="M:Game.Player.Shoot(SFML.System.Vector2f)">
            <summary>
            Shoots a PlayerProjectile
            </summary>
            <param name="TileMapPosition">Position of the TileMap</param>
        </member>
        <member name="M:Game.Player.ReduceHealth(System.UInt32)">
            <summary>
            Reduces the Player's Health by a specified amount of Damage
            </summary>
            <param name="Damage">Damage to be inflicted to the Player</param>
        </member>
        <member name="M:Game.Player.GetHealth">
            <summary>
            Gets the Health of the Player
            </summary>
            <returns>fHealth</returns>
        </member>
        <member name="M:Game.Player.LevelUp">
            <summary>
            Levels the Player Up: raises maximal Health and adds an Edge
            </summary>
        </member>
        <member name="M:Game.Player.RestartRegenerateTimer">
            <summary>
            Restarts cRegenerate
            </summary>
        </member>
        <member name="T:Game.Projectile">
            <summary>
            Projectile that can be shot by a Character
            </summary>
        </member>
        <member name="F:Game.Projectile.iAngle">
            <summary>
            Angle of the Projectile
            </summary>
        </member>
        <member name="F:Game.Projectile.vDirection">
            <summary>
            Direction of the Projectile
            </summary>
        </member>
        <member name="F:Game.Projectile.StartPosition">
            <summary>
            StartPosition of the Projectile
            </summary>
        </member>
        <member name="F:Game.Projectile.iVelocity">
            <summary>
            Velocity of the Projectile
            </summary>
        </member>
        <member name="F:Game.Projectile.vEntityPosition">
            <summary>
            Position of the Projectile
            </summary>
        </member>
        <member name="M:Game.Projectile.Draw">
            <summary>
            Returns the Sprite of the Projectile to be drawn
            </summary>
            <returns>sEntity</returns>
        </member>
        <member name="M:Game.Projectile.DisposeTexture">
            <summary>
            Disposes the Projectiles Texture
            </summary>
        </member>
        <member name="M:Game.Projectile.GetDirection">
            <summary>
            Gets the Projectile's Direction
            </summary>
            <returns>vDirection</returns>
        </member>
        <member name="M:Game.Projectile.GetTexture">
            <summary>
            Gets the Projectile's texture
            </summary>
            <returns>tEntity</returns>
        </member>
        <member name="T:Game.Questtracker">
            <summary>
            Generates a string to display quest status. Initial Quest text is generated in dependency of the enemy array. Update needs to know how many bosses have already been defeated. 
            </summary>
        </member>
        <member name="F:Game.Questtracker.sQuesttext">
            <summary>
            Text used to display the quests state.
            </summary>
        </member>
        <member name="F:Game.Questtracker.uiBossCount">
            <summary>
            Number of Boss Enemies spawned at the beginning. 
            </summary>
        </member>
        <member name="F:Game.Questtracker.uiBossesSlayed">
            <summary>
            Number of already defeated Bosses. Set to max number in the constructor. 
            </summary>
        </member>
        <member name="M:Game.Questtracker.GetQuestString">
            <summary>
            Returns the quest string in its recent form. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Questtracker.#ctor(Game.Entity[0:,0:],System.Int32,System.Int32)">
            <summary>
            Questtracker requires the entity array used to create the current level to calculate the number of bosses in use. 
            </summary>
            <param name="entityArray"></param>
            <param name="numberColumns"></param>
            <param name="numberRows"></param>
        </member>
        <member name="M:Game.Questtracker.Update(System.UInt32)">
            <summary>
            Used to update the number of defeated Bosses and return the quest status string. Number of defeated Bosses has to be counted somewhere else. 
            </summary>
            <param name="uBossesKilled">Number of Bosses killed</param>
            <returns></returns>
        </member>
        <member name="F:Game.Statemachine.gCurrentState">
            <summary>
            Current State of the Game
            </summary>
        </member>
        <member name="F:Game.Statemachine.gTargetState">
            <summary>
            Target State of the Game
            </summary>
        </member>
        <member name="F:Game.Statemachine.gPreviousState">
            <summary>
            State of the Game in the last frame
            </summary>
        </member>
        <member name="F:Game.Statemachine.sGameState">
            <summary>
            Instance of the Game State, main State
            </summary>
        </member>
        <member name="F:Game.Statemachine.sGameOverState">
            <summary>
            Instance of the GameOver State
            </summary>
        </member>
        <member name="F:Game.Statemachine.sMainMenuState">
            <summary>
            Instance of the MainMenu State
            </summary>
        </member>
        <member name="F:Game.Statemachine.lDrawList">
            <summary>
            List to be drawed
            </summary>
        </member>
        <member name="M:Game.Statemachine.#ctor">
            <summary>
            Statemachine constructor
            </summary>
        </member>
        <member name="M:Game.Statemachine.Initialize">
            <summary>
            Initializes Variables
            </summary>
        </member>
        <member name="M:Game.Statemachine.Update">
            <summary>
            Updates the Game
            </summary>
        </member>
        <member name="M:Game.Statemachine.Draw">
            <summary>
            Draws the Game
            </summary>
        </member>
        <member name="M:Game.Statemachine.InitializeState(Game.State)">
            <summary>
            Initializes a State when the State of the Game just changed
            </summary>
            <param name="sState">State to be initialized</param>
        </member>
        <member name="M:Game.Statemachine.DisposeState(Game.State)">
            <summary>
            Changes the current State if it's not equal to the target State
            </summary>
            <param name="sState">State to be disposed</param>
        </member>
        <member name="M:Game.Program.Main(System.String[])">
            <summary>
            Entry Point of the Solution, Instantiates Statemachine and runs it
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Game.StateGame.gTargetState">
            <summary>
            TargetState of the State
            </summary>
        </member>
        <member name="F:Game.StateGame.eCurrentMap">
            <summary>
            Current MapState
            </summary>
        </member>
        <member name="F:Game.StateGame.ePreviousMap">
            <summary>
            Previous MapState
            </summary>
        </member>
        <member name="F:Game.StateGame.eTargetMap">
            <summary>
            Target MapState
            </summary>
        </member>
        <member name="F:Game.StateGame.mMainMap">
            <summary>
            Instance of the main Map
            </summary>
        </member>
        <member name="M:Game.StateGame.#ctor">
            <summary>
            Constructor of the StateGame
            </summary>
        </member>
        <member name="M:Game.StateGame.Initialize">
            <summary>
            Initializes the State
            </summary>
        </member>
        <member name="M:Game.StateGame.Update(SFML.Graphics.RenderWindow)">
            <summary>
            Updates the State and manages Maps
            </summary>
            <param name="rWindow">Needed to Calculate MousePosition from its origin</param>
            <returns>gTargetState</returns>
        </member>
        <member name="M:Game.StateGame.Draw(SFML.Graphics.RenderWindow)">
            <summary>
            Returns a List with all the Element to draw
            </summary>
            <param name="window">Needed to draw TileMap</param>
            <returns>lDrawList</returns>
        </member>
        <member name="M:Game.StateGame.InitializeState(Game.MapState)">
            <summary>
            Initializes a Map State when the Map State just changed
            </summary>
            <param name="mState">Map State to be initialized</param>
        </member>
        <member name="M:Game.StateGame.DisposeState(Game.MapState)">
            <summary>
            Changes the current Map State if it's not equal to the target State
            </summary>
            <param name="mState">Map State to be disposed</param>
        </member>
        <member name="T:Game.State">
            <summary>
            State of the Game
            </summary>
        </member>
        <member name="M:Game.State.Initialize">
            <summary>
            Initializes Variables of the State
            </summary>
        </member>
        <member name="M:Game.State.Update(SFML.Graphics.RenderWindow)">
            <summary>
            Updates the State
            </summary>
            <param name="rWindow">Used to get MousePosition relative to the WindowOrigin</param>
            <returns>eTargetMap</returns>
        </member>
        <member name="M:Game.State.Draw(SFML.Graphics.RenderWindow)">
            <summary>
            Returns a List with all the Elements to be drawed besides the TileMap
            </summary>
            <param name="rWindow">Used to draw the TileMap</param>
            <returns>lDrawList</returns>
        </member>
        <member name="T:Game.eGameState">
            <summary>
            States of the Game
            </summary>
        </member>
        <member name="F:Game.eGameState.gsUndefined">
            <summary>
            Undefined State
            </summary>
        </member>
        <member name="F:Game.eGameState.gsMainMenu">
            <summary>
            Main Menu State
            </summary>
        </member>
        <member name="F:Game.eGameState.gsGame">
            <summary>
            Game State
            </summary>
        </member>
        <member name="F:Game.eGameState.gsGameOver">
            <summary>
            Game Over State
            </summary>
        </member>
        <member name="F:Game.eGameState.gsQuit">
            <summary>
            Quit State
            </summary>
        </member>
        <member name="T:Game.Tilez">
            <summary>
            Everywhere used enum to specify different types of tiles. 
            </summary>
        </member>
        <member name="F:Game.Tilez.black">
            <summary>
            Black Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.darkGrey">
            <summary>
            DarkGrey Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.grey">
            <summary>
            Grey Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.white">
            <summary>
            White Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.groundGrass">
            <summary>
            GroundGrass Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.groundStone">
            <summary>
            GroundStone Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.groundWood">
            <summary>
            GroundWood Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.treeTrunk">
            <summary>
            TreeTrunk Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.treeTop">
            <summary>
            TreeTop Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.treeFoilage">
            <summary>
            TreeFoilage Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.structureWood">
            <summary>
            Black Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.structureStone">
            <summary>
            StructureStone Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.obstacleStone">
            <summary>
            ObstacleStone Tilez
            </summary>
        </member>
        <member name="F:Game.Tilez.water">
            <summary>
            Water Tilez
            </summary>
        </member>
        <member name="T:Game.TileArrayCreation">
            <summary>
            Used for Creating and managing an Array of Tiles
            </summary>
        </member>
        <member name="F:Game.TileArrayCreation.iTileSize">
            <summary>
            Hardcoded and never changing value to determine ... well, your guess. 
            </summary>
        </member>
        <member name="F:Game.TileArrayCreation.iNumberColumns">
            <summary>
            Is generated in the constructor depending on the longest line in the source file (exactly: Biggest number of chars in the longest entry of the received string array). 
            </summary>
        </member>
        <member name="F:Game.TileArrayCreation.iNumberRows">
            <summary>
            Is generated in the consctructor depending on the number of lines in the source file (exactly: Number of entries in the received string array). 
            </summary>
        </member>
        <member name="F:Game.TileArrayCreation.e2CurrentLevel">
            <summary>
            Return value 
            </summary>
        </member>
        <member name="M:Game.TileArrayCreation.GetTilezArray">
            <summary>
            Returns the two dimensional Tilez array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.TileArrayCreation.GetTileSize">
            <summary>
            Returns a positive static integer mirroring the standard tile size. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.TileArrayCreation.GetNumberColumns">
            <summary>
            Returns an integer showing the number of columns of the current level Tilez array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.TileArrayCreation.GetNumberRows">
            <summary>
            Returns an integer showing the number of rows of the current level Tilez array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.TileArrayCreation.#ctor(System.String[])">
            <summary>
            Constructor receives the level data in the form of a string array and converts it into a tile array. After this, the array is not intended to be changed for this running session. 
            </summary>
            <param name="stringCurrentLevel"></param>
        </member>
        <member name="M:Game.TileArrayCreation.TileConversation(System.Char)">
            <summary>
            A hardcoded List of all available Types of Tiles. This method determines specific tile types in the array and is soly used by the consctructor of this class. 
            </summary>
            <param name="chTile"></param>
            <returns></returns>
        </member>
        <member name="M:Game.TileArrayCreation.CollisionReturner(System.Int32,System.Int32)">
            <summary>
            Soly to return a collision bool at specific coordinates if the tile map array. Unused coordinates, like negative values or too big ones, always return true. 
            </summary>
            <param name="iXCoord">X Coord to be inspected</param>
            <param name="iYCoord">Y Coord to be inspected</param>
            <returns></returns>
        </member>
        <member name="M:Game.TileArrayCreation.CollisionReturnerProjectiles(System.Int32,System.Int32)">
            <summary>
            Slightly alternated list of tiles with collision to match projectile requirements. Soly to return a collision bool at specific coordinates if the tile map array. Unused coordinates, like negative values or too big ones, always return true. 
            </summary>
            <param name="iXCoord"></param>
            <param name="iYCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Game.TileArrayCreation.CollisionReturner(Game.Tilez)">
            <summary>
            Returns collision bool in dependency of the given Tilez type 
            </summary>
            <param name="eTile"></param>
            <returns></returns>
        </member>
        <member name="T:Game.TileManager">
            <summary>
            Uses an instance of the TileArrayCreator to get an tile array out of the chosen .txt file. Draws the map depending on this tile array with every update, but only tiles within the screen. Also allows to get information about type and collision for chosen tiles at any location. 
            </summary>
        </member>
        <member name="F:Game.TileManager.tileArrayCreation">
            <summary>
            Instance of the same named class. 
            </summary>
        </member>
        <member name="F:Game.TileManager.tTileSheet">
            <summary>
            Texture format of the loaded tile sheet. Intended to load and be converted afterwards. 
            </summary>
        </member>
        <member name="F:Game.TileManager.spriteTileSheet">
            <summary>
            Sprite format. Is converted from the texture and used to draw tiles on the map. 
            </summary>
        </member>
        <member name="M:Game.TileManager.GetTileArray">
            <summary>
            Getter methods used to show variables created by the instanced TileArrayCreation. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.TileManager.GetNumberColumns">
            <summary>
            Returns the number of columns of the instanced TileArrayCreation. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.TileManager.GetNumberRows">
            <summary>
            Returns the number of rows of the instanced TileArrayCreation. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.TileManager.GetTileSize">
            <summary>
            Returns the general size of every tile in the instanced TileArrayCreation. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.TileManager.GetCollisionAt(System.Int32,System.Int32)">
            <summary>
            Returns a bool for specified x and y coordinates. If those coordinates are unused, a false is returned. 
            </summary>
            <param name="xCoord"></param>
            <param name="yCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Game.TileManager.#ctor(System.String[])">
            <summary>
            Constructor requires a one dimensional string array. 
            </summary>
            <param name="sLevelText"></param>
        </member>
        <member name="M:Game.TileManager.TileSourceDeterminat0r(Game.Tilez)">
            <summary>
            Hardcoded list of all sources on the tile sheet. Has to be manually updated with every tile on the source sheet that is added or removed. 
            </summary>
            <param name="eTile"></param>
            <returns></returns>
        </member>
        <member name="M:Game.TileManager.Draw(SFML.Graphics.RenderWindow,SFML.System.Vector2f)">
            <summary>
            Obtains the relative position of the tile map and draws all tiles within the screen using the corresponding tile array. Additionally, all tiles out of the map are drawn as tree foilage. 
            </summary>
            <param name="window"></param>
            <param name="v2fTileMapPosition"></param>
        </member>
        <member name="T:Game.Utilities">
            <summary>
            Class with useful mathematical operations
            </summary>
        </member>
        <member name="M:Game.Utilities.AngleBetweenVectors180(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Calculates the Angle between two Vectors
            </summary>
            <param name="Vector1">Vector 1</param>
            <param name="Vector2">Vector 2</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utilities.AngleBetweenVectors360(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Calculates the Angle between two Vectors clockwise (Can be over 180)
            </summary>
            <param name="Vector1">Vector 1</param>
            <param name="Vector2">Vector 2</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utilities.DistanceToVectorFromOrigin(SFML.System.Vector2f)">
            <summary>
            Calculates Distance between a Vector and Origin
            </summary>
            <param name="Vector1">Vector to calculate Distance to</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utilities.DistanceBetweenVectors(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Calculates Distance between two Vectors
            </summary>
            <param name="Vector1">Vector used as Origin</param>
            <param name="Vector2">Vector 2</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utilities.MakePositive(System.Single)">
            <summary>
            Turns a number to its equivalent positive value
            </summary>
            <param name="float1">Number to turn positive</param>
            <returns>Positive Number</returns>
        </member>
        <member name="M:Game.Utilities.VectorRotation(System.Single,SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Rotates a Vector
            </summary>
            <param name="fAngle">Angle to rotate the Vector</param>
            <param name="vVectorToRotate">Vector to rotate</param>
            <param name="vOrigin">Origin of the Vector to Rotate</param>
            <returns></returns>
        </member>
    </members>
</doc>
